@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
<div class="d-flex justify-content-center mt-4">
    <img src="./ekara_colors_logo.png" style="height: auto;" />
</div>
@if (!Model.ShowWelcomeScreen)
{
    <div class="container" id="divHome">

        <form class="needs-validation" method="post" id="frmIndex">
            <div class="text-white mt-4">
                <span class="cm-section-heading">Tell Us About Yourself</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Some Error Occurred During Operation!
                </div>
            }
            else
            {

                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-md-6">
                            <div class="text-center">
                                <div class="cm-panel-default mt20">

                                    @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                                    {

                                        for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                                        {
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                            if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                            {
                                                <dt class="col-sm-4 p-2 p10 text-start @Model.SubscriptionParameters[i].Type">
                                                    @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                                    @if (Model.SubscriptionParameters[i].IsRequired == true)
                                                    {
                                                        <span class="red-star @Model.SubscriptionParameters[i].Type">*</span>
                                                    }


                                                </dt>
                                            }
                                            else
                                            {
                                                @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                                {
                                                    <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                                    </dt>
                                                }
                                            }

                                            @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                            {
                                                @if (Model.SubscriptionParameters[i].FromList == true)
                                                {
                                                    var data = Model.SubscriptionParameters[i].ValuesList;
                                                    var selectList = new SelectList(data.Split(','));


                                                    <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                                        {
                                                            @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " form-select", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                                        }
                                                        else
                                                        {
                                                            @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " form-select", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                                        }

                                                    </dd>

                                                }
                                                else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                                {
                                                    <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                                        {
                                                            @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                                        }

                                                    </dd>
                                                }
                                                else
                                                {
                                                    <dd class="p-2 p10 text-center @Model.SubscriptionParameters[i].Type">

                                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                                        {
                                                            @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " form-control mb-3", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                                        }
                                                        else
                                                        {
                                                            @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " form-control mb-3", @type = @Model.SubscriptionParameters[i].Htmltype })
                                                        }

                                                    </dd>
                                                }
                                            }
                                            else
                                            {
                                                @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                                {
                                                    <dd class="col-sm-9 p-2 p10  @Model.SubscriptionParameters[i].Type">
                                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                                        @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                                    </dd>
                                                }
                                            }
                                        }

                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="text-end">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Deactivate" class="cm-button-danger text-right">Unsubscribe</button>
                        <button type="submit" asp-action="Subscriptions" class="btn btn-primary btn-lg" text-end">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="btn btn-primary btn-lg" text-end">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <div class="d-grid gap-2 col-3 mx-auto">
                            <button onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="btn btn-primary btn-lg" type="button">Get Started</button>
                        </div>                        
                    }
                </div>
            }
        </form>
    </div>
}
else
{
    <div class="pt-5">
        <h2 class="display-5 fw-bold text-body-emphasis text-center mb-4">
            The eyes of your users
        </h2>
        <div class="container center-content">
            <div class="card p-3 custom-card">
                <div class="text-center">
                    <p class="description">Ekara is a fully hybrid platform, capable of monitoring 100% of existing applications and ensuring the availability and performance of your environment (intranet and internet)</p>
                    <div class="d-grid gap-2 col-2 my-4 mx-auto">
                        <a class="btn btn-outline-dark btn-lg px-4" href="https://www.ip-label.com/" role="button">Details</a>
                    </div>
                    
                </div>
                <hr class="my-4 w-25" />
                <div class="purchase-info">
                    <p><b>To purchase this SaaS offer:</b></p>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Search for the resource <b>" Ekara "</b> in the Azure Marketplace</li>
                        <li class="list-group-item">Once you find Ekara, click <b>" Subscribe "</b> to subscribe to the offer</li>
                        <li class="list-group-item">After the subscription is created, click <b>" Configure Account "</b> to set up your Ekara account</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate()) {
            var formobject = $('#frmIndex').serialize();
            var csrftoken = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                headers: { RequestVerificationToken: csrftoken },
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }
   /*
    const forms = document.querySelectorAll('.needs-validation');
    // Loop over them and prevent submission
    Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault()
                event.stopPropagation()
            }

            form.classList.add('was-validated')
        }, false)
        */
    function validate() {
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return false;
        });
        return true;
    }

</script>